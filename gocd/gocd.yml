AWSTemplateFormatVersion: "2010-09-09"
Description: "The GoCD infrastructure for jakegillespie.me."
Parameters:
  NetworkStackName:
    Description: "The name of the stack that contains the networking resources to be used in this stack"
    Type: "String"
  ApplicationStackName:
    Description: "The name of the stack that contains the application resources to be used in this stack"
    Type: "String"
  GoServerAMI:
    Description: "The ID of the GoCD Server AMI"
    Type: "String"
  GoAgentAMI:
    Description: "The ID of the GoCD Agent AMI"
    Type: "String"
Resources:
  Server:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "eu-west-2a"
      ImageId: !Ref GoServerAMI
      InstanceInitiatedShutdownBehavior: "terminate"
      InstanceType: "t2.medium"
      KeyName: "jakegillespie"
      SecurityGroupIds:
        - !Ref UISecurityGroup
      SubnetId:
        Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "subnet-a" ] ]
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 8153
      Protocol: "HTTP"
      Targets:
        -
          Id: !Ref Server
          Port: 8153
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "vpc" ] ]
  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn: !ImportValue "certificate"
      DefaultActions:
        -
          TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      LoadBalancerArn:
        Fn::ImportValue: !Join [ "-", [ !Ref ApplicationStackName, "elb-resource-name" ] ]
      Port: 8153
      Protocol: "HTTPS"
  Agent:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "eu-west-2a"
      ImageId: !Ref GoAgentAMI
      InstanceInitiatedShutdownBehavior: "terminate"
      InstanceType: "t2.small"
      KeyName: "jakegillespie"
      SecurityGroupIds:
        - Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "server-security-group" ] ]
        - !Ref UISecurityGroup
      SubnetId:
        Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "subnet-a" ] ]
  UISecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Application server security group, allowing SSH from anywhere and HTTP from the load balancer security group"
      SecurityGroupIngress:
        -
          CidrIp: 90.194.73.12/32
          IpProtocol: "tcp"
          FromPort: 8153
          ToPort: 8153
      VpcId:
        Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "vpc" ] ]
