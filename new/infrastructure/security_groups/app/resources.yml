AWSTemplateFormatVersion: "2010-09-09"
Description: "The application load balancer for jakegillespie.me."
Resources:
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "eu-west-2a"
      IamInstanceProfile: !ImportValue "s3-read-only-instance-profile"
      ImageId: !Ref ApplicationAMI
      InstanceInitiatedShutdownBehavior: "terminate"
      InstanceType: "t2.micro"
      KeyName: "jakegillespie"
      SecurityGroupIds:
        - Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "server-security-group" ] ]
      SubnetId:
        Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "subnet-a" ] ]
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "load-balancer-security-group" ] ]
      Subnets:
        - Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "subnet-a" ] ]
        - Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "subnet-b" ] ]
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: "HTTP"
      Targets:
        -
          Id: !Ref EC2Instance
          Port: 80
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join [ "-", [ !Ref NetworkStackName, "vpc" ] ]
  InsecureListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        -
          TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: "HTTP"
  SecureListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn: !ImportValue "certificate"
      DefaultActions:
        -
          TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref ELB
      Port: 443
      Protocol: "HTTPS"
