AWSTemplateFormatVersion: "2010-09-09"
Description: "A test template"
Resources:
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: "true"
  MySubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "eu-west-2a"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: "true"
      VpcId:
        Ref: MyVPC
  MySubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "eu-west-2b"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: "true"
      VpcId:
        Ref: MyVPC
  MyRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: MyVPC
  MySubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: MyRouteTable
      SubnetId:
        Ref: MySubnet1
  MyInternetGateway:
    Type: "AWS::EC2::InternetGateway"
  MyRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: MyInternetGateway
      RouteTableId:
        Ref: MyRouteTable
  MyVPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId:
        Ref: MyInternetGateway
      VpcId:
        Ref: MyVPC
  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Test security group"
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
        -
          SourceSecurityGroupId:
            Ref: ELBSecurityGroup
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
      VpcId:
        Ref: MyVPC
  ELBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Test ELB security group"
      SecurityGroupIngress:
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
        -
          CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
      VpcId:
        Ref: MyVPC
  MyEC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "eu-west-2a"
      ImageId: "ami-ed908589"
      InstanceInitiatedShutdownBehavior: "terminate"
      InstanceType: "t2.micro"
      KeyName: "jakegillespie"
      SecurityGroupIds:
        - Ref: MySecurityGroup
      SubnetId:
        Ref: MySubnet1
  MyELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - Ref: ELBSecurityGroup
      Subnets:
        - Ref: MySubnet1
        - Ref: MySubnet2
  MyTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: "HTTP"
      Targets:
        -
          Id:
            Ref: MyEC2Instance
          Port: 80
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: MyVPC
  MyCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: "jakegillespie.me"
      SubjectAlternativeNames:
        - "*.jakegillespie.me"
  MyListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        -
          TargetGroupArn:
            Ref: MyTargetGroup
          Type: "forward"
      LoadBalancerArn:
        Ref: MyELB
      Port: 80
      Protocol: "HTTP"
  MyListenerTLS:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        -
          CertificateArn:
            Ref: MyCertificate
      DefaultActions:
        -
          TargetGroupArn:
            Ref: MyTargetGroup
          Type: "forward"
      LoadBalancerArn:
        Ref: MyELB
      Port: 443
      Protocol: "HTTPS"
