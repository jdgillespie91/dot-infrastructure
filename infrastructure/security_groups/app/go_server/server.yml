AWSTemplateFormatVersion: "2010-09-09"
Description: "The GoCD server resources that enable it to support jakegillespie.me."

Parameters:

  AppStackName:
    Type: String
    Description: "The name of the parent app stack"

  GoServerAMI:
    Type: String
    Description: "The ID of the GoCD Server AMI"

  SnapshotId:
    Type: String
    Description: "(Optional) The snapshot ID from which to create the volume"
    Default: ""

Conditions:

  UseSnapshot: !Not [!Equals [!Ref SnapshotId, ""]]

Resources:

  EC2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: "eu-west-2a"
      ImageId: !Ref GoServerAMI
      InstanceInitiatedShutdownBehavior: "terminate"
      InstanceType: "t2.medium"
      KeyName: "jakegillespie"
      SecurityGroupIds:
        - Fn::ImportValue: !Sub "${AppStackName}-allow-ssh"
        - !Ref SecurityGroup
      SubnetId:
        Fn::ImportValue: !Sub "${AppStackName}-subnet-a"
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          sudo mkdir /data
          sudo mount /dev/xvdf /data
          sudo /etc/init.d/go-server stop
          sudo rm -r /etc/default/go-server
          sudo ln -s /data/etc-default-go-server /etc/default/go-server
          sudo rm -r /etc/go
          sudo ln -s /data/etc-go /etc/go
          sudo rm -r /usr/share/go-server
          sudo ln -s /data/usr-share-go-server /usr/share/go-server
          sudo rm -r /var/lib/go-server
          sudo ln -s /data/var-lib-go-server /var/lib/go-server
          sudo /etc/init.d/go-server start

  Volume:
    Type: "AWS::EC2::Volume"
    Properties:
      AvailabilityZone: "eu-west-2a"
      Size: 8
      SnapshotId:
        !If [UseSnapshot, !Ref SnapshotId, !Ref "AWS::NoValue"]
      VolumeType: "gp2"
    DeletionPolicy: Snapshot

  VolumeAttachment:
    Type: "AWS::EC2::VolumeAttachment"
    Properties:
      Device: "/dev/sdf"
      InstanceId: !Ref EC2Instance
      VolumeId: !Ref Volume

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-399'
      Port: 8153
      Protocol: "HTTP"
      Targets:
        -
          Id: !Ref EC2Instance
          Port: 8153
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${AppStackName}-vpc"

  InsecureListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        -
          TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      Conditions:
        -
          Field: 'path-pattern'
          Values:
            - "/go*"
      ListenerArn:
        Fn::ImportValue: !Sub "${AppStackName}-insecure-listener"
      Priority: 1

  SecureListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        -
          TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      Conditions:
        -
          Field: 'path-pattern'
          Values:
            - "/go*"
      ListenerArn:
        Fn::ImportValue: !Sub "${AppStackName}-secure-listener"
      Priority: 1

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allows traffic on 8153 from the load balancer security group"
      SecurityGroupIngress:
        -
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub "${AppStackName}-load-balancer-security-group"
          IpProtocol: "tcp"
          FromPort: 8153
          ToPort: 8153
      VpcId:
        Fn::ImportValue: !Sub "${AppStackName}-vpc"

Outputs:

  SecurityGroup:
    Description: "The GoCD Server security group"
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-security-group"

  IP:
    Description: "The private IP of the server"
    Value: !GetAtt EC2Instance.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-ip"

  SSHSecurityGroup:
    Description: "The VPC ID"
    Value:
      Fn::ImportValue: !Sub "${AppStackName}-allow-ssh"
    Export:
      Name: !Sub "${AWS::StackName}-allow-ssh"

  VPC:
    Description: "The VPC ID"
    Value:
      Fn::ImportValue: !Sub "${AppStackName}-vpc"
    Export:
      Name: !Sub "${AWS::StackName}-vpc"

  SubnetA:
    Description: "The ID of subnet A"
    Value:
      Fn::ImportValue: !Sub "${AppStackName}-subnet-a"
    Export:
      Name: !Sub "${AWS::StackName}-subnet-a"
